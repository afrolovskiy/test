# Configuration file for runtime kernel parameters.

# A value from 0 to 100 which controls the degree to which the system
# favors anonymous memory or the page cache.
# A high value improves file-system performance, while aggressively
# swapping less active processes out of physical memory.
# A low value avoids swapping processes out of memory, which usually
# decreases latency, at the cost of I/O performance.
# The default value is 60.
# Setting swappiness=0 more aggressively avoids swapping out,
# which increases the risk of OOM killing under strong memory and I/O pressure.
vm.swappiness = 0

# The number of incoming connections that can queue up before dropping.
# Raising that value to more than 65535 can even be dangerous.
# See more at http://serverfault.com/questions/518862/will-increasing-net-core-somaxconn-make-a-difference#519152
# Default is 128.
net.core.somaxconn = 1000

# The  maximum  number  of  queued  connection  requests which have still not
# received an acknowledgement from the connecting client.
# If this number is exceeded, the kernel will begin dropping requests.
# The default value of 256 is increased to 1024 when the memory present
# in the system is adequate or greater (>= 128Mb), and reduced to 128 for those
# systems with very low memory (<= 32Mb).
# Prior to Linux 2.6.20, it was recommended that if this needed to be increased above 1024,
# the size of the SYNACK hash table (TCP_SYNQ_HSIZE) in include/net/tcp.h should be
# modified to keep TCP_SYNQ_HSIZE * 16 <= tcp_max_syn_backlog
# and the kernel should be recompiled.
# In Linux 2.6.20, the fixed sized TCP_SYNQ_HSIZE was removed in favor of dynamic sizing.
net.ipv4.tcp_max_syn_backlog = 8096

# The length of the network device input queue.
# The rate at which packets are buffered by the network card
# before being handed off to the CPU.
# Increasing the value can improve performance on machines with
# a high amount of bandwidth.
net.core.netdev_max_backlog = 5000

# The maximum number of file-handles that the Linux kernel will allocate.
# We generally tune this file to improve the number of open files by
# increasing the value to something reasonable like 256 for every 4M of RAM we have:
# i.e. for a machine with 128 MB of RAM, set it to 8192 - 128/4=32 32*256=8192.
# Per-process limit is set in /etc/security/limits.conf.
fs.file-max = 20000

# Allow to reuse TIME_WAIT sockets for new connections when it is safe
# from protocol viewpoint.
net.ipv4.tcp_tw_reuse = 1

# The maximum number of sockets in TIME_WAIT state allowed in the system.
# This limit exists only to prevent simple denial-of-service attacks.
# The default value of NR_FILE*2 is adjusted depending on the memory in the system.
# If this number is exceeded, the socket is closed and a warning is printed.
# net.ipv4.tcp_max_tw_buckets = 2000000

# If enabled, provide RFC 2861 behavior and time out the congestion window after an idle period.
# An idle period is defined as the current RTO (retransmission timeout).
# If disabled, the congestion window will not be timed out after an idle period.
# net.ipv4.tcp_slow_start_after_idle = 0
